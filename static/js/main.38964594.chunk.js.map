{"version":3,"sources":["logo.svg","components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","console","log","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,qMCE9BC,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,6BAAoEC,IAAI,YAChF,4BAAKL,EAAMG,QAAQG,MACnB,4BAAKN,EAAMG,QAAQI,UCCdC,G,MAAW,SAAAR,GACpB,OACA,yBAAKC,UAAU,aAEZD,EAAMS,SAASC,KAAI,SAAAD,GACnB,OACA,kBAAC,EAAD,CAAME,IAAKF,EAASL,GAAID,QAASM,UCT3BG,G,MAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEtB,2BACIb,UAAY,SACZc,KAAK,SACLF,YAAcA,EACdG,SAAUF,MC2DHG,E,kDA7Db,aAAe,IAAD,8BACZ,gBAoBFH,aAAe,SAACI,GACdC,QAAQC,IAAI,aAAZ,iBAlBA,EAAKC,MAAQ,CACXZ,SAAU,GACVa,YAAY,IANF,E,gEAWM,IAAD,OACjBC,MAAO,8CACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAACnB,SAAUkB,S,+BAYrCR,QAAQC,IAAI,uBAAwBS,Q,+BAGhC,IAAD,EAC4BA,KAAKR,MAA/BZ,EADF,EACEA,SAAUa,EADZ,EACYA,YACZQ,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC/CA,EAAQG,KAAK0B,cAAcC,SAASX,EAAYY,wBAOhD,OAEE,yBAAKjC,UAAU,OACb,gDACI,kBAAC,EAAD,CACAY,YAAY,kBACZC,aAAce,KAAKf,eACvB,kBAAC,EAAD,CAAUL,SAAUqB,S,GA/CVK,a,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.38964594.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './card.style.css';\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&Size=180Ã—180`} alt=\"monster\"/>\r\n        <h1>{props.monster.name}</h1> \r\n        <h2>{props.monster.email}</h2>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport {Card} from '../card/card-component';\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\nexport const CardList = props => {\r\n    return(\r\n    <div className='card-list'>\r\n        {\r\n       props.monsters.map(monsters => { \r\n       return(\r\n       <Card key={monsters.id} monster={monsters}/>)\r\n       }) \r\n        }\r\n    </div>)\r\n    }\r\n   \r\n;\r\n   \r\n\r\n","import React from 'react';\r\n\r\nimport './search-box-styles.css';\r\n\r\nexport const SearchBox =  ({placeholder, handleChange}) => (\r\n          \r\n    <input\r\n        className = 'search'\r\n        type='search'\r\n        placeholder= {placeholder}\r\n        onChange={handleChange}\r\n    />\r\n    )","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport  { CardList } from './components/card-list/card-list.component';\nimport {SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor() {\n    super();\n    \n    \n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n    \n  }\n\n  componentDidMount(){\n    fetch( 'https://jsonplaceholder.typicode.com/users' )\n    .then(response => response.json())\n    .then(users =>this.setState({monsters: users}));\n   \n    \n    \n    \n  }\n \n  handleChange = (e) => {\n    console.log('true false',this)\n    }\n\n    Myfunc(){\n      console.log('this is from my func', this)/*refers to App*/\n    }\n\n render(){\n   const { monsters, searchField } = this.state;\n   const filteredMonsters = monsters.filter(monster => \n    monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    \n\n   // this.Myfunc();\n   // this.handleChange();\n    \n    return(\n      \n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n            <SearchBox\n            placeholder='Search Monsters'\n            handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n        \n        \n      </div>\n    )\n  }\n\n\n}\n\n \n\n\n\nexport default App;\n\n/*\n\nclass People {\n  constructor(firstName , lastName, job){\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.job = job;\n\n  }\n\n  setFirsName(firstname){\n    this.firstName  = firstname;\n  };\n\n  setLastName (lastname){\n    this.lastName = lastname;\n  }\n\n  setJob (job){\n    this.job = job;\n  }\n\n\n}\n\n\nclass Workerv5 extends People{\n  constructor(wfirstname, wlastame){\n    super(wfirstname, wlastame)\n    this.job = 'society';\n  }\n  }\n\n  */\n\n \n \n/*\n  \n class Greetings extends Component{\n  constructor(){\n    const Greet = props => {\n      console.log(props)\n      return <h1> Hello {props.name} a.k.a {props.heroName} </h1>\n    }\n  }\n  \n\n  render(){\n    return(\n      <div className = 'App'>\n        <Greet name = \"Bruce\">how you doing</Greet>\n      </div>\n    )\n  }\n  \n\n\n }\n \n  \n\nexport default Greetings\n*/\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Greetings from './App'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}